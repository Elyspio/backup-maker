/* tslint:disable */
/* eslint-disable */
/**
 * Api documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ConnectOptions
 */
export interface ConnectOptions {
    /**
     * Hostname or IP address of the server.
     * @type {string}
     * @memberof ConnectOptions
     */
    host: string;
    /**
     * Port number of the server.
     * @type {number}
     * @memberof ConnectOptions
     */
    port: number;
    /**
     * Username for authentication.
     * @type {string}
     * @memberof ConnectOptions
     */
    username: string;
    /**
     * Password for password-based user authentication.
     * @type {string}
     * @memberof ConnectOptions
     */
    password: string;
}
/**
 * 
 * @export
 * @interface LocalBackupConfig
 */
export interface LocalBackupConfig {
    /**
     * 
     * @type {number}
     * @memberof LocalBackupConfig
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof LocalBackupConfig
     */
    type: LocalBackupConfigTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof LocalBackupConfig
     */
    interval: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof LocalBackupConfig
     */
    folders: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof LocalBackupConfig
     */
    work: LocalBackupConfigWorkEnum;
    /**
     * 
     * @type {Save}
     * @memberof LocalBackupConfig
     */
    save: Save;
}

/**
    * @export
    * @enum {string}
    */
export enum LocalBackupConfigTypeEnum {
    Local = 'local',
    Ssh = 'ssh'
}
/**
    * @export
    * @enum {string}
    */
export enum LocalBackupConfigWorkEnum {
    List = 'list'
}

/**
 * 
 * @export
 * @interface Save
 */
export interface Save {
    /**
     * 
     * @type {string}
     * @memberof Save
     */
    type?: SaveTypeEnum;
    /**
     * 
     * @type {ConnectOptions}
     * @memberof Save
     */
    connectionInfo?: ConnectOptions;
    /**
     * 
     * @type {string}
     * @memberof Save
     */
    path: string;
}

/**
    * @export
    * @enum {string}
    */
export enum SaveTypeEnum {
    Ssh = 'ssh',
    Local = 'local'
}

/**
 * 
 * @export
 * @interface ServiceConfig
 */
export interface ServiceConfig {
    /**
     * 
     * @type {Array<LocalBackupConfig>}
     * @memberof ServiceConfig
     */
    local: Array<LocalBackupConfig>;
    /**
     * 
     * @type {Array<SshBackupConfig>}
     * @memberof ServiceConfig
     */
    ssh: Array<SshBackupConfig>;
}
/**
 * 
 * @export
 * @interface SshBackupConfig
 */
export interface SshBackupConfig {
    /**
     * 
     * @type {number}
     * @memberof SshBackupConfig
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof SshBackupConfig
     */
    type: SshBackupConfigTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof SshBackupConfig
     */
    interval: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof SshBackupConfig
     */
    folders: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof SshBackupConfig
     */
    work: SshBackupConfigWorkEnum;
    /**
     * 
     * @type {Save}
     * @memberof SshBackupConfig
     */
    save: Save;
    /**
     * 
     * @type {ConnectOptions}
     * @memberof SshBackupConfig
     */
    connectionInfo: ConnectOptions;
}

/**
    * @export
    * @enum {string}
    */
export enum SshBackupConfigTypeEnum {
    Local = 'local',
    Ssh = 'ssh'
}
/**
    * @export
    * @enum {string}
    */
export enum SshBackupConfigWorkEnum {
    List = 'list'
}


/**
 * TaskApi - axios parameter creator
 * @export
 */
export const TaskApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a local config
         * @param {LocalBackupConfig} [localBackupConfig] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskAddLocalConfig: async (localBackupConfig?: LocalBackupConfig, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/task/config/local`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(localBackupConfig, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a ssh config
         * @param {SshBackupConfig} [sshBackupConfig] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskAddSshConfig: async (sshBackupConfig?: SshBackupConfig, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/task/config/ssh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sshBackupConfig, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all configs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskGetConfig: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/task/config`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskRunAllTask: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/task/run`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskRunTask: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('taskRunTask', 'id', id)
            const localVarPath = `/api/task/{id}/run`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskStopTask: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('taskStopTask', 'id', id)
            const localVarPath = `/api/task/{id}/stop`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TaskApi - functional programming interface
 * @export
 */
export const TaskApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TaskApiAxiosParamCreator(configuration)
    return {
        /**
         * Add a local config
         * @param {LocalBackupConfig} [localBackupConfig] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async taskAddLocalConfig(localBackupConfig?: LocalBackupConfig, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.taskAddLocalConfig(localBackupConfig, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add a ssh config
         * @param {SshBackupConfig} [sshBackupConfig] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async taskAddSshConfig(sshBackupConfig?: SshBackupConfig, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.taskAddSshConfig(sshBackupConfig, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all configs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async taskGetConfig(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceConfig>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.taskGetConfig(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async taskRunAllTask(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.taskRunAllTask(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async taskRunTask(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.taskRunTask(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async taskStopTask(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.taskStopTask(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TaskApi - factory interface
 * @export
 */
export const TaskApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TaskApiFp(configuration)
    return {
        /**
         * Add a local config
         * @param {LocalBackupConfig} [localBackupConfig] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskAddLocalConfig(localBackupConfig?: LocalBackupConfig, options?: any): AxiosPromise<void> {
            return localVarFp.taskAddLocalConfig(localBackupConfig, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a ssh config
         * @param {SshBackupConfig} [sshBackupConfig] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskAddSshConfig(sshBackupConfig?: SshBackupConfig, options?: any): AxiosPromise<void> {
            return localVarFp.taskAddSshConfig(sshBackupConfig, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all configs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskGetConfig(options?: any): AxiosPromise<ServiceConfig> {
            return localVarFp.taskGetConfig(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskRunAllTask(options?: any): AxiosPromise<void> {
            return localVarFp.taskRunAllTask(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskRunTask(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.taskRunTask(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskStopTask(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.taskStopTask(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TaskApi - object-oriented interface
 * @export
 * @class TaskApi
 * @extends {BaseAPI}
 */
export class TaskApi extends BaseAPI {
    /**
     * Add a local config
     * @param {LocalBackupConfig} [localBackupConfig] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public taskAddLocalConfig(localBackupConfig?: LocalBackupConfig, options?: any) {
        return TaskApiFp(this.configuration).taskAddLocalConfig(localBackupConfig, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a ssh config
     * @param {SshBackupConfig} [sshBackupConfig] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public taskAddSshConfig(sshBackupConfig?: SshBackupConfig, options?: any) {
        return TaskApiFp(this.configuration).taskAddSshConfig(sshBackupConfig, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all configs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public taskGetConfig(options?: any) {
        return TaskApiFp(this.configuration).taskGetConfig(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public taskRunAllTask(options?: any) {
        return TaskApiFp(this.configuration).taskRunAllTask(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public taskRunTask(id: number, options?: any) {
        return TaskApiFp(this.configuration).taskRunTask(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public taskStopTask(id: number, options?: any) {
        return TaskApiFp(this.configuration).taskStopTask(id, options).then((request) => request(this.axios, this.basePath));
    }
}


