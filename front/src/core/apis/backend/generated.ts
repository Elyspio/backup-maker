//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import type { AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from "axios";
import axios, { AxiosError } from "axios";

export class DeploysLocalClient {
	protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;
	private instance: AxiosInstance;
	private baseUrl: string;

	constructor(baseUrl?: string, instance?: AxiosInstance) {
		this.instance = instance ? instance : axios.create();

		this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
	}

	/**
	 * Get all local deployment configurations
	 * @return Success
	 */
	getLocalDeployments(cancelToken?: CancelToken | undefined): Promise<LocalDeployData[]> {
		let url_ = this.baseUrl + "/api/deploys/local";
		url_ = url_.replace(/[?&]$/, "");

		let options_: AxiosRequestConfig = {
			method: "GET",
			url: url_,
			headers: {
				Accept: "application/json",
			},
			cancelToken,
		};

		return this.instance
			.request(options_)
			.catch((_error: any) => {
				if (isAxiosError(_error) && _error.response) {
					return _error.response;
				} else {
					throw _error;
				}
			})
			.then((_response: AxiosResponse) => {
				return this.processGetLocalDeployments(_response);
			});
	}

	/**
	 * Create a new local deployment configuration
	 * @return No Content
	 */
	createLocalDeploy(body: LocalDeployBase, cancelToken?: CancelToken | undefined): Promise<void> {
		let url_ = this.baseUrl + "/api/deploys/local";
		url_ = url_.replace(/[?&]$/, "");

		const content_ = JSON.stringify(body);

		let options_: AxiosRequestConfig = {
			data: content_,
			method: "POST",
			url: url_,
			headers: {
				"Content-Type": "application/json",
			},
			cancelToken,
		};

		return this.instance
			.request(options_)
			.catch((_error: any) => {
				if (isAxiosError(_error) && _error.response) {
					return _error.response;
				} else {
					throw _error;
				}
			})
			.then((_response: AxiosResponse) => {
				return this.processCreateLocalDeploy(_response);
			});
	}

	/**
	 * Delete a local deployment configuration
	 * @return No Content
	 */
	deleteLocalDeploy(idDeploy: string, cancelToken?: CancelToken | undefined): Promise<void> {
		let url_ = this.baseUrl + "/api/deploys/local/{idDeploy}";
		if (idDeploy === undefined || idDeploy === null) throw new Error("The parameter 'idDeploy' must be defined.");
		url_ = url_.replace("{idDeploy}", encodeURIComponent("" + idDeploy));
		url_ = url_.replace(/[?&]$/, "");

		let options_: AxiosRequestConfig = {
			method: "DELETE",
			url: url_,
			headers: {},
			cancelToken,
		};

		return this.instance
			.request(options_)
			.catch((_error: any) => {
				if (isAxiosError(_error) && _error.response) {
					return _error.response;
				} else {
					throw _error;
				}
			})
			.then((_response: AxiosResponse) => {
				return this.processDeleteLocalDeploy(_response);
			});
	}

	/**
	 * Replace a local deployment configuration
	 * @param idDeploy Connection's id
	 * @param body new config
	 * @return No Content
	 */
	updateLocalDeploy(idDeploy: string, body: LocalDeployBase, cancelToken?: CancelToken | undefined): Promise<void> {
		let url_ = this.baseUrl + "/api/deploys/local/{idDeploy}";
		if (idDeploy === undefined || idDeploy === null) throw new Error("The parameter 'idDeploy' must be defined.");
		url_ = url_.replace("{idDeploy}", encodeURIComponent("" + idDeploy));
		url_ = url_.replace(/[?&]$/, "");

		const content_ = JSON.stringify(body);

		let options_: AxiosRequestConfig = {
			data: content_,
			method: "PUT",
			url: url_,
			headers: {
				"Content-Type": "application/json",
			},
			cancelToken,
		};

		return this.instance
			.request(options_)
			.catch((_error: any) => {
				if (isAxiosError(_error) && _error.response) {
					return _error.response;
				} else {
					throw _error;
				}
			})
			.then((_response: AxiosResponse) => {
				return this.processUpdateLocalDeploy(_response);
			});
	}

	protected processGetLocalDeployments(response: AxiosResponse): Promise<LocalDeployData[]> {
		const status = response.status;
		let _headers: any = {};
		if (response.headers && typeof response.headers === "object") {
			for (let k in response.headers) {
				if (response.headers.hasOwnProperty(k)) {
					_headers[k] = response.headers[k];
				}
			}
		}
		if (status === 200) {
			const _responseText = response.data;
			let result200: any = null;
			let resultData200 = _responseText;
			result200 = JSON.parse(resultData200);
			return Promise.resolve<LocalDeployData[]>(result200);
		} else if (status !== 200 && status !== 204) {
			const _responseText = response.data;
			return throwException("An unexpected server error occurred.", status, _responseText, _headers);
		}
		return Promise.resolve<LocalDeployData[]>(null as any);
	}

	protected processCreateLocalDeploy(response: AxiosResponse): Promise<void> {
		const status = response.status;
		let _headers: any = {};
		if (response.headers && typeof response.headers === "object") {
			for (let k in response.headers) {
				if (response.headers.hasOwnProperty(k)) {
					_headers[k] = response.headers[k];
				}
			}
		}
		if (status === 204) {
			const _responseText = response.data;
			return Promise.resolve<void>(null as any);
		} else if (status !== 200 && status !== 204) {
			const _responseText = response.data;
			return throwException("An unexpected server error occurred.", status, _responseText, _headers);
		}
		return Promise.resolve<void>(null as any);
	}

	protected processDeleteLocalDeploy(response: AxiosResponse): Promise<void> {
		const status = response.status;
		let _headers: any = {};
		if (response.headers && typeof response.headers === "object") {
			for (let k in response.headers) {
				if (response.headers.hasOwnProperty(k)) {
					_headers[k] = response.headers[k];
				}
			}
		}
		if (status === 204) {
			const _responseText = response.data;
			return Promise.resolve<void>(null as any);
		} else if (status !== 200 && status !== 204) {
			const _responseText = response.data;
			return throwException("An unexpected server error occurred.", status, _responseText, _headers);
		}
		return Promise.resolve<void>(null as any);
	}

	protected processUpdateLocalDeploy(response: AxiosResponse): Promise<void> {
		const status = response.status;
		let _headers: any = {};
		if (response.headers && typeof response.headers === "object") {
			for (let k in response.headers) {
				if (response.headers.hasOwnProperty(k)) {
					_headers[k] = response.headers[k];
				}
			}
		}
		if (status === 204) {
			const _responseText = response.data;
			return Promise.resolve<void>(null as any);
		} else if (status !== 200 && status !== 204) {
			const _responseText = response.data;
			return throwException("An unexpected server error occurred.", status, _responseText, _headers);
		}
		return Promise.resolve<void>(null as any);
	}
}

export class JobsClient {
	protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;
	private instance: AxiosInstance;
	private baseUrl: string;

	constructor(baseUrl?: string, instance?: AxiosInstance) {
		this.instance = instance ? instance : axios.create();

		this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
	}

	/**
	 * Get all jobs
	 * @return Success
	 */
	getJobs(cancelToken?: CancelToken | undefined): Promise<JobData[]> {
		let url_ = this.baseUrl + "/api/jobs";
		url_ = url_.replace(/[?&]$/, "");

		let options_: AxiosRequestConfig = {
			method: "GET",
			url: url_,
			headers: {
				Accept: "application/json",
			},
			cancelToken,
		};

		return this.instance
			.request(options_)
			.catch((_error: any) => {
				if (isAxiosError(_error) && _error.response) {
					return _error.response;
				} else {
					throw _error;
				}
			})
			.then((_response: AxiosResponse) => {
				return this.processGetJobs(_response);
			});
	}

	/**
	 * Create a new job
	 * @return No Content
	 */
	createJob(body: CreateJobRequest, cancelToken?: CancelToken | undefined): Promise<void> {
		let url_ = this.baseUrl + "/api/jobs";
		url_ = url_.replace(/[?&]$/, "");

		const content_ = JSON.stringify(body);

		let options_: AxiosRequestConfig = {
			data: content_,
			method: "POST",
			url: url_,
			headers: {
				"Content-Type": "application/json",
			},
			cancelToken,
		};

		return this.instance
			.request(options_)
			.catch((_error: any) => {
				if (isAxiosError(_error) && _error.response) {
					return _error.response;
				} else {
					throw _error;
				}
			})
			.then((_response: AxiosResponse) => {
				return this.processCreateJob(_response);
			});
	}

	/**
	 * Trigger a job
	 * @return No Content
	 */
	updateJob(idJob: string, body: CreateJobRequest, cancelToken?: CancelToken | undefined): Promise<void> {
		let url_ = this.baseUrl + "/api/jobs/{idJob}";
		if (idJob === undefined || idJob === null) throw new Error("The parameter 'idJob' must be defined.");
		url_ = url_.replace("{idJob}", encodeURIComponent("" + idJob));
		url_ = url_.replace(/[?&]$/, "");

		const content_ = JSON.stringify(body);

		let options_: AxiosRequestConfig = {
			data: content_,
			method: "PUT",
			url: url_,
			headers: {
				"Content-Type": "application/json",
			},
			cancelToken,
		};

		return this.instance
			.request(options_)
			.catch((_error: any) => {
				if (isAxiosError(_error) && _error.response) {
					return _error.response;
				} else {
					throw _error;
				}
			})
			.then((_response: AxiosResponse) => {
				return this.processUpdateJob(_response);
			});
	}

	/**
	 * Delete a job
	 * @return No Content
	 */
	deleteJob(idJob: string, cancelToken?: CancelToken | undefined): Promise<void> {
		let url_ = this.baseUrl + "/api/jobs/{idJob}";
		if (idJob === undefined || idJob === null) throw new Error("The parameter 'idJob' must be defined.");
		url_ = url_.replace("{idJob}", encodeURIComponent("" + idJob));
		url_ = url_.replace(/[?&]$/, "");

		let options_: AxiosRequestConfig = {
			method: "DELETE",
			url: url_,
			headers: {},
			cancelToken,
		};

		return this.instance
			.request(options_)
			.catch((_error: any) => {
				if (isAxiosError(_error) && _error.response) {
					return _error.response;
				} else {
					throw _error;
				}
			})
			.then((_response: AxiosResponse) => {
				return this.processDeleteJob(_response);
			});
	}

	protected processGetJobs(response: AxiosResponse): Promise<JobData[]> {
		const status = response.status;
		let _headers: any = {};
		if (response.headers && typeof response.headers === "object") {
			for (let k in response.headers) {
				if (response.headers.hasOwnProperty(k)) {
					_headers[k] = response.headers[k];
				}
			}
		}
		if (status === 200) {
			const _responseText = response.data;
			let result200: any = null;
			let resultData200 = _responseText;
			result200 = JSON.parse(resultData200);
			return Promise.resolve<JobData[]>(result200);
		} else if (status !== 200 && status !== 204) {
			const _responseText = response.data;
			return throwException("An unexpected server error occurred.", status, _responseText, _headers);
		}
		return Promise.resolve<JobData[]>(null as any);
	}

	protected processCreateJob(response: AxiosResponse): Promise<void> {
		const status = response.status;
		let _headers: any = {};
		if (response.headers && typeof response.headers === "object") {
			for (let k in response.headers) {
				if (response.headers.hasOwnProperty(k)) {
					_headers[k] = response.headers[k];
				}
			}
		}
		if (status === 204) {
			const _responseText = response.data;
			return Promise.resolve<void>(null as any);
		} else if (status !== 200 && status !== 204) {
			const _responseText = response.data;
			return throwException("An unexpected server error occurred.", status, _responseText, _headers);
		}
		return Promise.resolve<void>(null as any);
	}

	protected processUpdateJob(response: AxiosResponse): Promise<void> {
		const status = response.status;
		let _headers: any = {};
		if (response.headers && typeof response.headers === "object") {
			for (let k in response.headers) {
				if (response.headers.hasOwnProperty(k)) {
					_headers[k] = response.headers[k];
				}
			}
		}
		if (status === 204) {
			const _responseText = response.data;
			return Promise.resolve<void>(null as any);
		} else if (status !== 200 && status !== 204) {
			const _responseText = response.data;
			return throwException("An unexpected server error occurred.", status, _responseText, _headers);
		}
		return Promise.resolve<void>(null as any);
	}

	protected processDeleteJob(response: AxiosResponse): Promise<void> {
		const status = response.status;
		let _headers: any = {};
		if (response.headers && typeof response.headers === "object") {
			for (let k in response.headers) {
				if (response.headers.hasOwnProperty(k)) {
					_headers[k] = response.headers[k];
				}
			}
		}
		if (status === 204) {
			const _responseText = response.data;
			return Promise.resolve<void>(null as any);
		} else if (status !== 200 && status !== 204) {
			const _responseText = response.data;
			return throwException("An unexpected server error occurred.", status, _responseText, _headers);
		}
		return Promise.resolve<void>(null as any);
	}
}

export class MongoDatabaseClient {
	protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;
	private instance: AxiosInstance;
	private baseUrl: string;

	constructor(baseUrl?: string, instance?: AxiosInstance) {
		this.instance = instance ? instance : axios.create();

		this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
	}

	/**
	 * Get informations about databases, collections, sizes for all connections
	 * @return Success
	 */
	getInfos(cancelToken?: CancelToken | undefined): Promise<GetConnectionInformationResponse> {
		let url_ = this.baseUrl + "/api/database/infos";
		url_ = url_.replace(/[?&]$/, "");

		let options_: AxiosRequestConfig = {
			method: "GET",
			url: url_,
			headers: {
				Accept: "application/json",
			},
			cancelToken,
		};

		return this.instance
			.request(options_)
			.catch((_error: any) => {
				if (isAxiosError(_error) && _error.response) {
					return _error.response;
				} else {
					throw _error;
				}
			})
			.then((_response: AxiosResponse) => {
				return this.processGetInfos(_response);
			});
	}

	/**
	 * Add a new database connection
	 * @return No Content
	 */
	addConnection(body: AddMongoConnectionRequest, cancelToken?: CancelToken | undefined): Promise<void> {
		let url_ = this.baseUrl + "/api/database/connections";
		url_ = url_.replace(/[?&]$/, "");

		const content_ = JSON.stringify(body);

		let options_: AxiosRequestConfig = {
			data: content_,
			method: "POST",
			url: url_,
			headers: {
				"Content-Type": "application/json",
			},
			cancelToken,
		};

		return this.instance
			.request(options_)
			.catch((_error: any) => {
				if (isAxiosError(_error) && _error.response) {
					return _error.response;
				} else {
					throw _error;
				}
			})
			.then((_response: AxiosResponse) => {
				return this.processAddConnection(_response);
			});
	}

	/**
	 * Get all databases connections available
	 * @return Success
	 */
	getConnections(cancelToken?: CancelToken | undefined): Promise<MongoConnectionData[]> {
		let url_ = this.baseUrl + "/api/database/connections";
		url_ = url_.replace(/[?&]$/, "");

		let options_: AxiosRequestConfig = {
			method: "GET",
			url: url_,
			headers: {
				Accept: "application/json",
			},
			cancelToken,
		};

		return this.instance
			.request(options_)
			.catch((_error: any) => {
				if (isAxiosError(_error) && _error.response) {
					return _error.response;
				} else {
					throw _error;
				}
			})
			.then((_response: AxiosResponse) => {
				return this.processGetConnections(_response);
			});
	}

	/**
	 * Replace the connectionString for a connection
	 * @param idConnection Connection's id
	 * @param body new connectionString
	 * @return No Content
	 */
	updateConnectionString(idConnection: string, body: string, cancelToken?: CancelToken | undefined): Promise<void> {
		let url_ = this.baseUrl + "/api/database/connections/{idConnection}/connection-string";
		if (idConnection === undefined || idConnection === null) throw new Error("The parameter 'idConnection' must be defined.");
		url_ = url_.replace("{idConnection}", encodeURIComponent("" + idConnection));
		url_ = url_.replace(/[?&]$/, "");

		const content_ = JSON.stringify(body);

		let options_: AxiosRequestConfig = {
			data: content_,
			method: "PUT",
			url: url_,
			headers: {
				"Content-Type": "application/json",
			},
			cancelToken,
		};

		return this.instance
			.request(options_)
			.catch((_error: any) => {
				if (isAxiosError(_error) && _error.response) {
					return _error.response;
				} else {
					throw _error;
				}
			})
			.then((_response: AxiosResponse) => {
				return this.processUpdateConnectionString(_response);
			});
	}

	/**
	 * Replace the connectionString for a connection
	 * @param idConnection Connection's id
	 * @return No Content
	 */
	deleteConnection(idConnection: string, cancelToken?: CancelToken | undefined): Promise<void> {
		let url_ = this.baseUrl + "/api/database/connections/{idConnection}";
		if (idConnection === undefined || idConnection === null) throw new Error("The parameter 'idConnection' must be defined.");
		url_ = url_.replace("{idConnection}", encodeURIComponent("" + idConnection));
		url_ = url_.replace(/[?&]$/, "");

		let options_: AxiosRequestConfig = {
			method: "DELETE",
			url: url_,
			headers: {},
			cancelToken,
		};

		return this.instance
			.request(options_)
			.catch((_error: any) => {
				if (isAxiosError(_error) && _error.response) {
					return _error.response;
				} else {
					throw _error;
				}
			})
			.then((_response: AxiosResponse) => {
				return this.processDeleteConnection(_response);
			});
	}

	protected processGetInfos(response: AxiosResponse): Promise<GetConnectionInformationResponse> {
		const status = response.status;
		let _headers: any = {};
		if (response.headers && typeof response.headers === "object") {
			for (let k in response.headers) {
				if (response.headers.hasOwnProperty(k)) {
					_headers[k] = response.headers[k];
				}
			}
		}
		if (status === 200) {
			const _responseText = response.data;
			let result200: any = null;
			let resultData200 = _responseText;
			result200 = JSON.parse(resultData200);
			return Promise.resolve<GetConnectionInformationResponse>(result200);
		} else if (status !== 200 && status !== 204) {
			const _responseText = response.data;
			return throwException("An unexpected server error occurred.", status, _responseText, _headers);
		}
		return Promise.resolve<GetConnectionInformationResponse>(null as any);
	}

	protected processAddConnection(response: AxiosResponse): Promise<void> {
		const status = response.status;
		let _headers: any = {};
		if (response.headers && typeof response.headers === "object") {
			for (let k in response.headers) {
				if (response.headers.hasOwnProperty(k)) {
					_headers[k] = response.headers[k];
				}
			}
		}
		if (status === 204) {
			const _responseText = response.data;
			return Promise.resolve<void>(null as any);
		} else if (status !== 200 && status !== 204) {
			const _responseText = response.data;
			return throwException("An unexpected server error occurred.", status, _responseText, _headers);
		}
		return Promise.resolve<void>(null as any);
	}

	protected processGetConnections(response: AxiosResponse): Promise<MongoConnectionData[]> {
		const status = response.status;
		let _headers: any = {};
		if (response.headers && typeof response.headers === "object") {
			for (let k in response.headers) {
				if (response.headers.hasOwnProperty(k)) {
					_headers[k] = response.headers[k];
				}
			}
		}
		if (status === 200) {
			const _responseText = response.data;
			let result200: any = null;
			let resultData200 = _responseText;
			result200 = JSON.parse(resultData200);
			return Promise.resolve<MongoConnectionData[]>(result200);
		} else if (status !== 200 && status !== 204) {
			const _responseText = response.data;
			return throwException("An unexpected server error occurred.", status, _responseText, _headers);
		}
		return Promise.resolve<MongoConnectionData[]>(null as any);
	}

	protected processUpdateConnectionString(response: AxiosResponse): Promise<void> {
		const status = response.status;
		let _headers: any = {};
		if (response.headers && typeof response.headers === "object") {
			for (let k in response.headers) {
				if (response.headers.hasOwnProperty(k)) {
					_headers[k] = response.headers[k];
				}
			}
		}
		if (status === 204) {
			const _responseText = response.data;
			return Promise.resolve<void>(null as any);
		} else if (status !== 200 && status !== 204) {
			const _responseText = response.data;
			return throwException("An unexpected server error occurred.", status, _responseText, _headers);
		}
		return Promise.resolve<void>(null as any);
	}

	protected processDeleteConnection(response: AxiosResponse): Promise<void> {
		const status = response.status;
		let _headers: any = {};
		if (response.headers && typeof response.headers === "object") {
			for (let k in response.headers) {
				if (response.headers.hasOwnProperty(k)) {
					_headers[k] = response.headers[k];
				}
			}
		}
		if (status === 204) {
			const _responseText = response.data;
			return Promise.resolve<void>(null as any);
		} else if (status !== 200 && status !== 204) {
			const _responseText = response.data;
			return throwException("An unexpected server error occurred.", status, _responseText, _headers);
		}
		return Promise.resolve<void>(null as any);
	}
}

export class TasksClient {
	protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;
	private instance: AxiosInstance;
	private baseUrl: string;

	constructor(baseUrl?: string, instance?: AxiosInstance) {
		this.instance = instance ? instance : axios.create();

		this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
	}

	/**
	 * Get all mongo backup task configurations
	 * @return Success
	 */
	getMongoTasks(cancelToken?: CancelToken | undefined): Promise<MongoBackupTaskData[]> {
		let url_ = this.baseUrl + "/api/tasks/backup/mongo";
		url_ = url_.replace(/[?&]$/, "");

		let options_: AxiosRequestConfig = {
			method: "GET",
			url: url_,
			headers: {
				Accept: "application/json",
			},
			cancelToken,
		};

		return this.instance
			.request(options_)
			.catch((_error: any) => {
				if (isAxiosError(_error) && _error.response) {
					return _error.response;
				} else {
					throw _error;
				}
			})
			.then((_response: AxiosResponse) => {
				return this.processGetMongoTasks(_response);
			});
	}

	/**
	 * Create a new mongo backup task configuration
	 * @return No Content
	 */
	createMongoTask(body: MongoBackupTask, cancelToken?: CancelToken | undefined): Promise<void> {
		let url_ = this.baseUrl + "/api/tasks/backup/mongo";
		url_ = url_.replace(/[?&]$/, "");

		const content_ = JSON.stringify(body);

		let options_: AxiosRequestConfig = {
			data: content_,
			method: "POST",
			url: url_,
			headers: {
				"Content-Type": "application/json",
			},
			cancelToken,
		};

		return this.instance
			.request(options_)
			.catch((_error: any) => {
				if (isAxiosError(_error) && _error.response) {
					return _error.response;
				} else {
					throw _error;
				}
			})
			.then((_response: AxiosResponse) => {
				return this.processCreateMongoTask(_response);
			});
	}

	/**
	 * Update a  mongo backup task configuration
	 * @return No Content
	 */
	updateMongoTask(idTask: string, body: MongoBackupTask, cancelToken?: CancelToken | undefined): Promise<void> {
		let url_ = this.baseUrl + "/api/tasks/backup/mongo/{idTask}";
		if (idTask === undefined || idTask === null) throw new Error("The parameter 'idTask' must be defined.");
		url_ = url_.replace("{idTask}", encodeURIComponent("" + idTask));
		url_ = url_.replace(/[?&]$/, "");

		const content_ = JSON.stringify(body);

		let options_: AxiosRequestConfig = {
			data: content_,
			method: "PUT",
			url: url_,
			headers: {
				"Content-Type": "application/json",
			},
			cancelToken,
		};

		return this.instance
			.request(options_)
			.catch((_error: any) => {
				if (isAxiosError(_error) && _error.response) {
					return _error.response;
				} else {
					throw _error;
				}
			})
			.then((_response: AxiosResponse) => {
				return this.processUpdateMongoTask(_response);
			});
	}

	/**
	 * Delete a mongo backup task configurations
	 * @return No Content
	 */
	deleteMongoTask(idTask: string, cancelToken?: CancelToken | undefined): Promise<void> {
		let url_ = this.baseUrl + "/api/tasks/backup/mongo/{idTask}";
		if (idTask === undefined || idTask === null) throw new Error("The parameter 'idTask' must be defined.");
		url_ = url_.replace("{idTask}", encodeURIComponent("" + idTask));
		url_ = url_.replace(/[?&]$/, "");

		let options_: AxiosRequestConfig = {
			method: "DELETE",
			url: url_,
			headers: {},
			cancelToken,
		};

		return this.instance
			.request(options_)
			.catch((_error: any) => {
				if (isAxiosError(_error) && _error.response) {
					return _error.response;
				} else {
					throw _error;
				}
			})
			.then((_response: AxiosResponse) => {
				return this.processDeleteMongoTask(_response);
			});
	}

	protected processGetMongoTasks(response: AxiosResponse): Promise<MongoBackupTaskData[]> {
		const status = response.status;
		let _headers: any = {};
		if (response.headers && typeof response.headers === "object") {
			for (let k in response.headers) {
				if (response.headers.hasOwnProperty(k)) {
					_headers[k] = response.headers[k];
				}
			}
		}
		if (status === 200) {
			const _responseText = response.data;
			let result200: any = null;
			let resultData200 = _responseText;
			result200 = JSON.parse(resultData200);
			return Promise.resolve<MongoBackupTaskData[]>(result200);
		} else if (status !== 200 && status !== 204) {
			const _responseText = response.data;
			return throwException("An unexpected server error occurred.", status, _responseText, _headers);
		}
		return Promise.resolve<MongoBackupTaskData[]>(null as any);
	}

	protected processCreateMongoTask(response: AxiosResponse): Promise<void> {
		const status = response.status;
		let _headers: any = {};
		if (response.headers && typeof response.headers === "object") {
			for (let k in response.headers) {
				if (response.headers.hasOwnProperty(k)) {
					_headers[k] = response.headers[k];
				}
			}
		}
		if (status === 204) {
			const _responseText = response.data;
			return Promise.resolve<void>(null as any);
		} else if (status !== 200 && status !== 204) {
			const _responseText = response.data;
			return throwException("An unexpected server error occurred.", status, _responseText, _headers);
		}
		return Promise.resolve<void>(null as any);
	}

	protected processUpdateMongoTask(response: AxiosResponse): Promise<void> {
		const status = response.status;
		let _headers: any = {};
		if (response.headers && typeof response.headers === "object") {
			for (let k in response.headers) {
				if (response.headers.hasOwnProperty(k)) {
					_headers[k] = response.headers[k];
				}
			}
		}
		if (status === 204) {
			const _responseText = response.data;
			return Promise.resolve<void>(null as any);
		} else if (status !== 200 && status !== 204) {
			const _responseText = response.data;
			return throwException("An unexpected server error occurred.", status, _responseText, _headers);
		}
		return Promise.resolve<void>(null as any);
	}

	protected processDeleteMongoTask(response: AxiosResponse): Promise<void> {
		const status = response.status;
		let _headers: any = {};
		if (response.headers && typeof response.headers === "object") {
			for (let k in response.headers) {
				if (response.headers.hasOwnProperty(k)) {
					_headers[k] = response.headers[k];
				}
			}
		}
		if (status === 204) {
			const _responseText = response.data;
			return Promise.resolve<void>(null as any);
		} else if (status !== 200 && status !== 204) {
			const _responseText = response.data;
			return throwException("An unexpected server error occurred.", status, _responseText, _headers);
		}
		return Promise.resolve<void>(null as any);
	}
}

export interface AddMongoConnectionRequest {
	name: string;
	connectionString: string;
}

export enum Backup {
	Mongo = "Mongo",
}

export interface BaseBackupTask {
	name: string;
}

export interface CollectionInfo {
	/** Collection's name */
	name: string;
	/** Collection documents count */
	documents: number;
	/** Collection size info */
	sizes: CollectionSizes;
}

/** Collection size in MegaBytes */
export interface CollectionSizes {
	/** Sum of BackupMaker.Api.Abstractions.Models.Base.Database.Mongo.Info.CollectionSizes.DocumentsSize and BackupMaker.Api.Abstractions.Models.Base.Database.Mongo.Info.CollectionSizes.IndexesSize */
	totalSize: number;
	documentsSize: number;
	indexesSize: {
		[key: string]: number;
	};
}

export interface JobBase {
	name: string;
	cronInterval: string;
	deployType: Deploy;
	backupType: Backup;
}

export interface CreateJobRequest extends JobBase {
	idDeploy: string;
	idBackup: string;
}

export interface DatabaseInfo {
	/** Database's name */
	name: string;
	/** Database's Collections */
	collections: CollectionInfo[];
}

export enum Deploy {
	Local = "Local",
}

export interface DeployBase {
	name: string;
}

export interface GetConnectionInformationResponse {
	data: {
		[key: string]: DatabaseInfo[];
	};
	errors: {
		[key: string]: string;
	};
}

export interface JobData extends CreateJobRequest {
	id: string;
}

export interface JobEntity extends JobBase {
	id: ObjectId;
	idDeploy: ObjectId;
	idBackup: ObjectId;
}

export interface LocalDeployBase extends DeployBase {
	/** Path where files are moved */
	outputPath: string;
}

export interface LocalDeployData extends LocalDeployBase {
	id: string;
}

export interface LocalDeployEntity extends LocalDeployBase {
	id: ObjectId;
}

/** Backup job for a mongo connection */
export interface MongoBackupTask extends BaseBackupTask {
	/** Id of the mongo connection */
	idConnection: string;
	/** Mapping of a database to a list of collection to backup */
	elements: {
		[key: string]: string[];
	};
}

export interface MongoBackupTaskData extends MongoBackupTask {
	/** JobDetail's id */
	id: string;
}

export interface MongoBackupTaskEntity extends MongoBackupTask {
	id: ObjectId;
}

export interface MongoConnectionBase {
	name: string;
}

export interface MongoConnectionData extends MongoConnectionBase {
	id: string;
}

export interface MongoConnectionEntity extends MongoConnectionBase {
	id: ObjectId;
	connectionString: string;
}

export interface ObjectId {
	readonly timestamp?: number;
	readonly machine?: number;
	readonly pid?: number;
	readonly increment?: number;
	readonly creationTime?: string;
}

export class ApiException extends Error {
	override message: string;
	status: number;
	response: string;
	headers: {
		[key: string]: any;
	};
	result: any;
	protected isApiException = true;

	constructor(
		message: string,
		status: number,
		response: string,
		headers: {
			[key: string]: any;
		},
		result: any
	) {
		super();

		this.message = message;
		this.status = status;
		this.response = response;
		this.headers = headers;
		this.result = result;
	}

	static isApiException(obj: any): obj is ApiException {
		return obj.isApiException === true;
	}
}

function throwException(
	message: string,
	status: number,
	response: string,
	headers: {
		[key: string]: any;
	},
	result?: any
): any {
	if (result !== null && result !== undefined) throw result;
	else throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
	return obj && obj.isAxiosError === true;
}
